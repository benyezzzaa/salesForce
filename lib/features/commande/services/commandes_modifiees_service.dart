import 'package:dio/dio.dart';
import 'package:get_storage/get_storage.dart';
import 'package:pfe/core/utils/app_api.dart';

class CommandesModifieesService {
  final Dio _dio = Dio(BaseOptions(baseUrl: AppApi.baseUrl));
  final box = GetStorage();

  /// R√©cup√©rer toutes les commandes modifi√©es par l'admin
  Future<List<dynamic>> getCommandesModifiees() async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: R√©cup√©ration des commandes modifi√©es');
      
      final response = await _dio.get(
        '/commandes/modifiees',
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;
        print('üì° CommandesModifieesService: ${data.length} commandes modifi√©es r√©cup√©r√©es');
        return data;
      } else {
        print("‚ùå Erreur de chargement des commandes modifi√©es : ${response.statusCode}");
        return [];
      }
    } catch (e) {
      print("‚ùå Erreur de r√©cup√©ration des commandes modifi√©es : $e");
      return [];
    }
  }

  /// R√©cup√©rer les notifications de modifications
  Future<List<dynamic>> getNotificationsModifications() async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: R√©cup√©ration des notifications');
      
      final response = await _dio.get(
        '/commandes/notifications',
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;
        // Filtrer uniquement les notifications de modifications
        final modifications = data.where((n) => 
          n['type'] == 'modification' || 
          n['message']?.toString().toLowerCase().contains('modifi√©') == true
        ).toList();
        print('üì° CommandesModifieesService: ${modifications.length} notifications de modifications trouv√©es');
        return modifications;
      } else {
        print("‚ùå Erreur de chargement des notifications : ${response.statusCode}");
        return [];
      }
    } catch (e) {
      print("‚ùå Erreur de r√©cup√©ration des notifications : $e");
      return [];
    }
  }

  /// Marquer une commande comme vue
  Future<bool> marquerCommeVue(int commandeId) async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: Marquage comme vue pour la commande $commandeId');
      
      final response = await _dio.put(
        '/commandes/notifications/$commandeId/vu',
        data: {},
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        print('‚úÖ Commande marqu√©e comme vue avec succ√®s');
        return true;
      } else {
        print("‚ùå Erreur lors du marquage : ${response.statusCode}");
        return false;
      }
    } catch (e) {
      print("‚ùå Erreur lors du marquage comme vue : $e");
      return false;
    }
  }

  /// Marquer toutes les modifications comme vues
  Future<bool> marquerToutesCommeVues() async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: Marquage de toutes les modifications comme vues');
      
      final response = await _dio.patch(
        '/commandes/historique/vue',
        data: {},
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        print('‚úÖ Toutes les modifications marqu√©es comme vues');
        return true;
      } else {
        print("‚ùå Erreur lors du marquage global : ${response.statusCode}");
        return false;
      }
    } catch (e) {
      print("‚ùå Erreur lors du marquage global : $e");
      return false;
    }
  }

  /// R√©cup√©rer les d√©tails d'une commande modifi√©e
  Future<Map<String, dynamic>?> getDetailsCommandeModifiee(int commandeId) async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: R√©cup√©ration des d√©tails de la commande $commandeId');
      
      final response = await _dio.get(
        '/commandes/modifiees/details/$commandeId',
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        print('‚úÖ D√©tails de la commande modifi√©e r√©cup√©r√©s');
        return response.data;
      } else {
        print("‚ùå Erreur de r√©cup√©ration des d√©tails : ${response.statusCode}");
        return null;
      }
    } catch (e) {
      print("‚ùå Erreur de r√©cup√©ration des d√©tails : $e");
      return null;
    }
  }

  /// Compter les commandes modifi√©es non vues
  Future<int> getNombreModificationsNonVues() async {
    final token = box.read('token');

    try {
      print('üì° CommandesModifieesService: R√©cup√©ration du nombre de notifications non vues');
      
      final response = await _dio.get(
        '/commandes/notifications/count',
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        final count = response.data['count'] ?? 0;
        print('üì° CommandesModifieesService: $count notifications non vues');
        return count;
      } else {
        print("‚ùå Erreur de r√©cup√©ration du comptage : ${response.statusCode}");
        return 0;
      }
    } catch (e) {
      print("‚ùå Erreur lors du comptage : $e");
      return 0;
    }
  }
} 